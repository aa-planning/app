---
http_interactions:
- request:
    method: post
    uri: https://api.linear.app/graphql/issues
    body:
      encoding: UTF-8
      string: '{"query":"{\n  issues {\n    nodes {\n      id\n      title\n      description\n    }\n  }\n}\n"}'
    headers:
      Authorization:
      - a
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 29 Mar 2024 10:49:54 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 86bf4bc368413443-LIS
      Cf-Cache-Status:
      - DYNAMIC
      Cache-Control:
      - private, no-cache, no-store, must-revalidate
      Etag:
      - W/"73a2-UstOpkLBaRF6yWI+4aGCSpNrK9A"
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=86400
      X-Complexity:
      - '65'
      X-Ratelimit-Complexity-Limit:
      - '3000000'
      X-Ratelimit-Complexity-Remaining:
      - '2999935'
      X-Ratelimit-Complexity-Reset:
      - '1711712994734'
      X-Ratelimit-Requests-Limit:
      - '1500'
      X-Ratelimit-Requests-Remaining:
      - '1499'
      X-Ratelimit-Requests-Reset:
      - '1711712994734'
      X-Request-Id:
      - 86bf4bc484133443-LIS
      Set-Cookie:
      - __cf_bm=7WuDFMXcwJgpQkefCM3r.ap8W8Yef9B_E8nqvAhcBlw-1711709394-1.0.1.1-dWtaae0.H5fvmh2bQD2_oraWPdQ4tj4R9s399mBnP5QSBdZjqJcDGATTebDpfv7ZeqXFIph8zZ4liLOOmyteZA;
        path=/; expires=Fri, 29-Mar-24 11:19:54 GMT; domain=.linear.app; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=G_0j0UjjVX9oFT_UqZzMVNvXQTGRN.TpgTiJBq4Lh5g-1711709394951-0.0.1.1-604800000;
        path=/; domain=.linear.app; HttpOnly; Secure; SameSite=None
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 29 Mar 2024 10:49:54 GMT
recorded_with: VCR 6.2.0
